{
  "Comment": "Create community summary",
  "StartAt": "Run Enrichments",
  "States": {
    "Run Enrichments": {
      "Type": "Parallel",
      "Next": "Summarize",
      "Branches": [
        {
          "StartAt": "Get Channel Details",
          "States": {
            "Get Channel Details": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${MapChannelNames}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Last Run",
          "States": {
            "Get Last Run": {
              "Type": "Task",
              "Resource": "${DynamoDbGetItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S": "lastRun"
                  },
                  "sk": {
                    "S": "details"
                  }
                }
              },
              "Next": "Has Last Run?"
            },
            "Has Last Run?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Item",
                  "IsPresent": true,
                  "Next": "Use Last Run"
                }
              ],
              "Default": "Create Last Run Record"
            },
            "Create Last Run Record": {
              "Type": "Task",
              "Resource": "${DynamoDbPutItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Item": {
                  "pk": {
                    "S": "lastRun"
                  },
                  "sk": {
                    "S": "details"
                  }
                }
              },
              "Next": "Use Execution Date",
              "ResultPath": null
            },
            "Use Last Run": {
              "Type": "Pass",
              "Next": "Has On-Demand Settings?",
              "Parameters": {
                "filterDate.$": "$.Item.date.S",
                "lastMemberCount.$": "$.Item.memberCount.N"
              }
            },
            "Has On-Demand Settings?": {
              "Type": "Choice",
              "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$$.Execution.Input.mode",
                      "StringEquals": "on demand"
                    },
                    {
                      "Variable": "$$.Execution.Input.metadata.fromDate",
                      "IsPresent": true
                    }
                  ],
                  "Next": "Use On-Demand Settings"
                }
              ],
              "Default": "Use Schedule Settings"
            },
            "Use Schedule Settings": {
              "Type": "Pass",
              "End": true
            },
            "Use On-Demand Settings": {
              "Type": "Pass",
              "Parameters": {
                "filterDate.$": "$$.Execution.Input.metadata.fromDate",
                "lastMemberCount.$": "$.lastMemberCount"
              },
              "End": true
            },
            "Use Execution Date": {
              "Type": "Pass",
              "End": true,
              "Parameters": {
                "filterDate.$": "$$.Execution.StartTime",
                "lastMemberCount": 0
              }
            }
          }
        }
      ],
      "ResultPath": "$.enrichments"
    },
    "Summarize": {
      "Type": "Parallel",
      "Next": "Format Email",
      "Branches": [
        {
          "StartAt": "Iterate Channels",
          "States": {
            "Iterate Channels": {
              "Type": "Map",
              "End": true,
              "ItemsPath": "$.enrichments[0].channels",
              "ItemSelector": {
                "channel.$": "$$.Map.Item.Value",
                "filterDate.$": "$.enrichments[1].filterDate"
              },
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Get Channel Metadata",
                "States": {
                  "Get Channel Metadata": {
                    "Type": "Task",
                    "Resource": "${DynamoDbGetItem}",
                    "Parameters": {
                      "TableName": "${TableName}",
                      "Key": {
                        "pk": {
                          "S.$": "$.channel.name"
                        },
                        "sk": {
                          "S": "channel"
                        }
                      }
                    },
                    "Next": "Is On-Demand Or Has Channel Been Scanned Before?",
                    "ResultPath": "$.data"
                  },
                  "Is On-Demand Or Has Channel Been Scanned Before?": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$$.Execution.Input.mode",
                        "StringEquals": "on demand",
                        "Next": "Get Channel Messages"
                      },
                      {
                        "Variable": "$.data.Item",
                        "IsPresent": true,
                        "Next": "Get Channel Messages With Last Message Id"
                      }
                    ],
                    "Default": "Get Channel Messages"
                  },
                  "Get Channel Messages With Last Message Id": {
                    "Type": "Task",
                    "Resource": "${LambdaInvoke}",
                    "Parameters": {
                      "FunctionName": "${GetChannelMessages}",
                      "Payload": {
                        "channel.$": "$.channel",
                        "filterDate.$": "$.filterDate",
                        "format": "transcript",
                        "lastMessageId.$": "$.data.Item.lastMessageId.S"
                      }
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "IntervalSeconds": 5,
                        "MaxAttempts": 3,
                        "BackoffRate": 2
                      }
                    ],
                    "Next": "Process Messages",
                    "ResultPath": "$.messages",
                    "ResultSelector": {
                      "transcript.$": "$.Payload.transcript",
                      "metadata.$": "$.Payload.metadata",
                      "lastMessageId.$": "$.Payload.lastMessageId"
                    }
                  },
                  "Get Channel Messages": {
                    "Type": "Task",
                    "Resource": "${LambdaInvoke}",
                    "Parameters": {
                      "FunctionName": "${GetChannelMessages}",
                      "Payload": {
                        "channel.$": "$.channel",
                        "filterDate.$": "$.filterDate",
                        "format": "transcript"
                      }
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "IntervalSeconds": 5,
                        "MaxAttempts": 3,
                        "BackoffRate": 2
                      }
                    ],
                    "Next": "Process Messages",
                    "ResultPath": "$.messages",
                    "ResultSelector": {
                      "transcript.$": "$.Payload.transcript",
                      "metadata.$": "$.Payload.metadata",
                      "lastMessageId.$": "$.Payload.lastMessageId"
                    }
                  },
                  "Process Messages": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "Has Messages?",
                        "States": {
                          "Has Messages?": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.messages.metadata.messageCount",
                                "NumericGreaterThan": 0,
                                "Next": "Summarize Transcript"
                              }
                            ],
                            "Default": "Skip Summary"
                          },
                          "Skip Summary": {
                            "Type": "Pass",
                            "End": true,
                            "Parameters": {
                              "summary": "No messages were sent in this channel",
                              "questions": [],
                              "channel.$": "$.channel.name",
                              "hasSummary": false
                            }
                          },
                          "Summarize Transcript": {
                            "Type": "Task",
                            "Resource": "${LambdaInvoke}",
                            "OutputPath": "$.Payload",
                            "Parameters": {
                              "FunctionName": "${SummarizeTranscript}",
                              "Payload": {
                                "channel.$": "$.channel.name",
                                "transcript.$": "$.messages.transcript"
                              }
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "States.ALL"
                                ],
                                "IntervalSeconds": 5,
                                "MaxAttempts": 3,
                                "BackoffRate": 2
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Save Channel Data?",
                        "States": {
                          "Save Channel Data?": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$$.Execution.Input.mode",
                                "StringEquals": "on demand",
                                "Next": "Skip Channel Data Save"
                              }
                            ],
                            "Default": "Save Channel Run Data"
                          },
                          "Skip Channel Data Save": {
                            "Type": "Pass",
                            "End": true
                          },
                          "Save Channel Run Data": {
                            "Type": "Task",
                            "Resource": "${DynamoDbPutItem}",
                            "Parameters": {
                              "TableName": "${TableName}",
                              "Item": {
                                "pk": {
                                  "S.$": "$.channel.name"
                                },
                                "sk": {
                                  "S.$": "$$.Execution.StartTime"
                                },
                                "messageCount": {
                                  "N.$": "States.Format('{}', $.messages.metadata.messageCount)"
                                },
                                "distinctUsers": {
                                  "N.$": "States.Format('{}', $.messages.metadata.distinctUsers)"
                                }
                              }
                            },
                            "ResultPath": null,
                            "Next": "Save Channel Metadata"
                          },
                          "Save Channel Metadata": {
                            "Type": "Task",
                            "Resource": "${DynamoDbPutItem}",
                            "Parameters": {
                              "TableName": "${TableName}",
                              "Item": {
                                "pk": {
                                  "S.$": "$.channel.name"
                                },
                                "sk": {
                                  "S": "channel"
                                },
                                "lastMessageId": {
                                  "S.$": "$.messages.lastMessageId"
                                }
                              }
                            },
                            "ResultPath": null,
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true,
                    "ResultSelector": {
                      "channel.$": "$[0]"
                    },
                    "OutputPath": "$.channel"
                  }
                }
              }
            }
          }
        },
        {
          "StartAt": "Get Member Data",
          "States": {
            "Get Member Data": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${GetMemberData}",
                "Payload": {
                  "filterDate.$": "$.enrichments[1].filterDate",
                  "lastMemberCount.$": "$.enrichments[1].lastMemberCount"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Update Member Counts?"
            },
            "Update Member Counts?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$$.Execution.Input.mode",
                  "StringEquals": "schedule",
                  "Next": "Add Member Count to Analytics"
                }
              ],
              "Default": "Skip Member Update"
            },
            "Skip Member Update": {
              "Type": "Pass",
              "End": true
            },
            "Add Member Count to Analytics": {
              "Type": "Task",
              "Resource": "${DynamoDbUpdateItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S": "member"
                  },
                  "sk": {
                    "S": "counts"
                  }
                },
                "UpdateExpression": "SET #data = list_append(#data, :data)",
                "ExpressionAttributeNames": {
                  "#data": "data"
                },
                "ExpressionAttributeValues": {
                  ":data": {
                    "L": [
                      {
                        "M": {
                          "count": {"N.$": "States.Format('{}', $.memberCount)"},
                          "date": {"S.$": "$$.Execution.StartTime"}
                        }
                      }
                    ]
                  }
                }
              },
              "Next": "Update Member Details",
              "ResultPath": null,
              "Catch": [
                {
                  "ErrorEquals": ["DynamoDB.AmazonDynamoDBException"],
                  "Next": "Create Member Count Analytics",
                  "ResultPath": null
                }
              ]
            },
            "Create Member Count Analytics": {
              "Type": "Task",
              "Resource": "${DynamoDbPutItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Item": {
                  "pk": {
                    "S": "member"
                  },
                  "sk": {
                    "S": "counts"
                  },
                  "data": {
                    "L": [
                      {
                        "M": {
                          "count": {
                            "N.$": "States.Format('{}', $.memberCount)"
                          },
                          "date": {
                            "S.$": "$$.Execution.StartTime"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "Next": "Update Member Details",
              "ResultPath": null
            },
            "Update Member Details": {
              "Type": "Task",
              "Resource": "${DynamoDbUpdateItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S": "lastRun"
                  },
                  "sk": {
                    "S": "details"
                  }
                },
                "UpdateExpression": "SET #memberCount = :memberCount, #lostMemberCount = :lostMemberCount, #newMemberCount = :newMemberCount",
                "ExpressionAttributeNames": {
                  "#memberCount": "memberCount",
                  "#lostMemberCount": "lostMemberCount",
                  "#newMemberCount": "newMemberCount"
                },
                "ExpressionAttributeValues": {
                  ":memberCount": {
                    "N.$": "States.Format('{}', $.memberCount)"
                  },
                  ":lostMemberCount": {
                    "N.$": "States.Format('{}', $.lostMemberCount)"
                  },
                  ":newMemberCount": {
                    "N.$": "States.Format('{}', $.newMemberCount)"
                  }
                }
              },
              "End": true,
              "ResultPath": null
            }
          }
        },
        {
          "StartAt": "Format metadata",
          "States": {
            "Format metadata": {
              "Type": "Pass",
              "End": true,
              "Parameters": {
                "fromDate.$": "$.enrichments[1].filterDate",
                "toDate.$": "$$.Execution.StartTime"
              }
            }
          }
        }
      ],
      "ResultSelector": {
        "channels.$": "$[0]",
        "members.$": "$[1]",
        "metadata.$": "$[2]"
      }
    },
    "Format Email": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "${FormatSummaryEmail}",
        "Payload": {
          "channels.$": "$.channels",
          "members.$": "$.members",
          "metadata.$": "$.metadata"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Save Run Results"
    },
    "Save Run Results": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Email Default Recipients?",
          "States": {
            "Email Default Recipients?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$$.Execution.Input.metadata.to",
                  "IsPresent": true,
                  "Next": "Send Email To Custom Recipients"
                }
              ],
              "Default": "Send Email (Default)"
            },
            "Send Email To Custom Recipients": {
              "Type": "Task",
              "Resource": "${EventBridgePutEvents}",
              "Parameters": {
                "Entries": [
                  {
                    "Detail": {
                      "subject": "[On-Demand] Believe in Serverless Weekly Update",
                      "to.$": "$$.Execution.Input.metadata.to",
                      "cc.$": "$$.Execution.Input.metadata.cc",
                      "html.$": "$.html"
                    },
                    "DetailType": "Send Email",
                    "Source": "bis.weekly-update"
                  }
                ]
              },
              "ResultPath": null,
              "End": true
            },
            "Send Email (Default)": {
              "Type": "Task",
              "Resource": "${EventBridgePutEvents}",
              "Parameters": {
                "Entries": [
                  {
                    "Detail": {
                      "subject": "Believe in Serverless Weekly Update",
                      "to": "allenheltondev@gmail.com",
                      "cc": [
                        "andres@andmore.dev",
                        "daheber@gmail.com",
                        "j.eastham1993@gmail.com",
                        "benbpyle@gmail.com"
                      ],
                      "html.$": "$.html"
                    },
                    "DetailType": "Send Email",
                    "Source": "bis.weekly-update"
                  }
                ]
              },
              "ResultPath": null,
              "End": true
            }
          }
        },
        {
          "StartAt": "Save Last Run Record?",
          "States": {
            "Save Last Run Record?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$$.Execution.Input.mode",
                  "StringEquals": "on demand",
                  "Next": "Success"
                }
              ],
              "Default": "Update Last Run Record"
            },
            "Success": {
              "Type": "Succeed"
            },
            "Update Last Run Record": {
              "Type": "Task",
              "Resource": "${DynamoDbUpdateItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S": "lastRun"
                  },
                  "sk": {
                    "S": "details"
                  }
                },
                "UpdateExpression": "SET #date = :date",
                "ExpressionAttributeNames": {
                  "#date": "date"
                },
                "ExpressionAttributeValues": {
                  ":date": {
                    "S.$": "$$.Execution.StartTime"
                  }
                }
              },
              "End": true,
              "ResultPath": null
            }
          }
        },
        {
          "StartAt": "Save Run Output",
          "States": {
            "Save Run Output": {
              "Type": "Task",
              "Resource": "${DynamoDbPutItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Item": {
                  "pk": {
                    "S": "run"
                  },
                  "sk": {
                    "S.$": "$$.Execution.Name"
                  },
                  "runDate": {
                    "S.$": "$$.Execution.StartTime"
                  },
                  "mode": {
                    "S.$": "$$.Execution.Input.mode"
                  },
                  "html": {
                    "S.$": "$.html"
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "End": true
    }
  }
}
